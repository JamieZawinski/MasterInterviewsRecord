#ondoubt
Videography Interviews With Creative Minds from all Fields
It's hard to describe what I do because I mean a simple description would be a design in program video games but then the things that I do are kind of differnt from what most people think of when they think of video games but then these days of I also do other things like I'm designing and building a programming language that ultimately in part would be be applied to things like games which are still one of the subsets of types of software where people actually care how well the software is built anymore well what I do today is a direct extension of what I did the fist time I sat down in front of a computer and was able to play with it which was in class in grade school that was about 10 years old there was a very simple basic class but I really enjoyed what was happening there and just ran with it and 90% of the time I was in that class just stared doing my own thing and my own thing at that time was making a very simple game and these days the thing said that I work on are much much more complicated but it's the same thing at some level I mean everything is different at a practical level you know the computers are different the way you build software is different the resulting software is different the way that I expect people to interact with the resulting software if different but it's still there's a continuum from there to now and I'm really at some level basically doing the same thing.

The Shape of a Problem Doesn't Start Anywhere 
Jonathan Blow on Software Development
you for some reason I was very interested in programming languages when I was in college I'm not sure why I took to that but I did I made a bunch of what I would now call sort of hobby programming languages then I made probaly 10 or 11 different ones it was again it was fun and interesting to do that gave me some practice in implementing programming languages which came in handy later but it also taught me some things because when you're new at something like that and you're just excited to to it same thing actually if you start designing games right the actual ideas that you have when you're new at something are not going to be that deep well with high likelihood they're not going to be the thing that moves the world significantly in some way just because you yourself are not immersed enough in the thing so the things that excite you are just at the surface level and you have to get used to those you have to know how they go and get deeper and know how those go and get deeper and so you know most of these programming languages I did were based around one exciting idea like Oh wouldn't it be great if the language worked in this particular way and it's like okay yeah okay that's one cute idea but it's not it's not enough to justify people coming and using this whole system just for that little thing it's actually it reminds me I also did some fiction writing when I was in college and I would have these ideas for strories and it would be like one idea that I was excited about and what I understand now is that's not really enough it has to maybe be a core of something that more things hang off or are built around or to interact with you know if you just have this one idea that by itself is not really fundamental it's just a random thing you're excited about I don't know a good story has like 20 of those things in it right and so when you find one that's good you put that in your pocket but you need you need the other 19 things at least you know that's how I do game design so anyway looking back at the programming language time from now I can see when when things were not really enough right which which then by extension teaches me when things are enough.

About Programming:Craft,Improvisation&Intuition
programming is a craft is very complicated you know I've always been somebody who's very interested in being good at what I do and it still I didn't reach my current level of programming skill I probably got there in 2012 or 2013 right so if I started programming in 1981 there's worth 30 years right to get to get to a noticeable I you know I don't know if this is like as good as I'll ever been something but to get to whereever that's and the basic activity what you do changes as you get better in the beginning the things you're tying to solve are very simple like you're just trying to figure out how to talk to the computer in the first place right and so all these exercises with very simple three line programs or something or just trying to get you to understand how it works but you know as it goes on it becomes different and what I find interesting now is that most programming languages are text they don't look like human language but they look like something written down and that's actually important because I think it's a robust format to communicate in like people try to make programming languages sometimes where you manipulate shapes around or something and that makes sense to some degree but it's like never is good for some reason so the thing is that we write the programming text so we're communicating to the computer through this text medium but experienced programmers don't think in text at all it's like they're thinking about something translating it to text momentarily so it can come back so the text part is very thin temporary exchange portion of what's happening right so at some point at a moderate level of experience what you're thinking about is I mean you have some big problem and you're able to very quickly decompose it into smaller problems that you know are tractable and that look like other things that you've done before and so you know just how to do those things and put them together so that's thinking about the thing at a global scale of the whole project but then each of those individual things there's a something that's harder to explain where programming is structured in certain ways like there's patterns of the way the CPU dose operation or the way that data is stored in memory  in certain ways in order to be manipulated quickly or even just understandably and those parterns are a little bit like abstract shapes or something and so when you're trying to solve one of these subproblems you're just like visualizing the shape of this solution and then translating that into text so you're not even necessarily writing the text in order that it would make sense that someone would read it or that the computer would run it you're just like okay I need this part in it for this part because if you see the shape the shape doesn't start anywhere right and so then there's another little bit of a skill of like figuring out where to start to make this shape happen in it in a way that you don't flail around very much trying to do the translation I mean there's later stuff than that so there's stuff I don't even understand I mean I've had experiences of oh I'm gonna do this thing that's it's a non-trivial problem it's relatively difficult it's gonna take me 25 minutes of typing and I've had times where I just I don't exactly want to say go into a trance but I just start doing the thing and I'm not even I'm not even consciously thinking about the solution in that way that I just mentioned about the shapes of the structures or anything I'm just like I'm going completely on intuition and I type in for 20 minutes 25 minutes at the end of that I have no recollection of what I just did and I hit compile in it it either works or it comes very close to working right so at that point you've internalized this process so far that  it's not even thinking as we usually do it that's an easier thing to understand with simpler tasks so evrybody I think is familiar with you know you're walking back and forth through the neighborhood that you're in or you drive to work and back in at some point you like get in the car and you're thinking about something or whatever and then you you're home and you're like whoa that was little bit weird I just automatically drove home this is like that I think for a much much more complicated task especially because not a specific route that you've ever traveled before but you somehow are able to do it that's a really interesting experience that I've only I've only had very strong versions of that experience a few times and it always just shook me a little bit I have smaller bits of it like a lot like I'll often just start working on problems now and I don't even know what I'm doing like I can't I couldn't consiously tell you what I'm trying to do but it's like a productive direction to go so there is some level of internalization the thing about that is it's craft but it also necessarilly kind of so you can program as an art or you can program as engineering right and ofen there's element of both of those right but the engineering part is we have a very well specified problem and we can rationally explain to you why when these sequence of things happens it will produce a solution and maybe we can even prove it or whatever and it's meeting some design goal and all that  that's engineering right but this kind of like I don't know what I'm doing but I type in a program and it works that kind of proramming can't be engineering exactly like it's informed by all the engineering what I've done but it's actually a lot more like art where it's like I don't know if painters do this but it's like I'm starting to paint and I'm following intuition and I end up somewhere good right probably you need to be a very experienced painter to do that but it seems very similar and so it's like art int that way but it's also like art in that it it miss necessarily can't be determined by these functional requirements exactly because you would have to be engaging your thinking mind to make sure that things match up or whatever it's just more like you know I want something generally like this so I'm gonna I'm going to do it I know an anology of that because I do a lot of improv as a dancing and it's the same thing where you have to have built up a vocabulary of what you know your body can do under what conditions and all these things but then when you do this improvisational thing you're just reacting I didn't know two seconds ago that I was going to decide to do this but now I'm doing it right but actually the programming thing that I mentioned is even different from that because when I'm improvising and I'm dancing like that at least for any experience that I've ever had and I've done this a lot I'm still consiously aware of what I'm doing like the decisions come a little deeper because you can't you can't stop and think about what you're gonna do because it takes long enough to do that that then you miss the instant right it's just coming over time and if you have to make a decision you will miss the thing and so the decision has to come naturally so that happens in dance a lot too but for the programming thing I was talking about is even weirder because I'm not even consciously aware of the decision it's just I go somewhere for 20 minutes and then there's a program like yeal I don't know it's interesting there is a level before that that's analogous I think like you can improvisationally program where you're like on yeah I'm gonna do this I'm going to do that I'm going to do that which would also meet all those criteria saying before about it kind of has to be more on the art side and less on the engineering side but that's less mysterious to me that's more like oh I'm experienced and I'm having fun but there's a thing that really is weird where it's just like I don't know what happened but I wrote a program 

Establishing a Programming Langusge:JAI
so when I started building this language the very common response was you know everybody uses this other programming language called C++ it's this giant complicated thing it's impossible to build a replacement and even if you somehow did nobody would ever use it because they're all using this existing thing and it's like all right it's I understand how you could mentally think that because I was actually in that mindset mostly before I started building this an breaking out of that mindset was part of what made me so happy when I start making it so it's it's easy to have that feeling about the status quo about how things are but it's obviously wrong because things change the programming languages we use today are not the ones that we used in 1980 whatever programming languages you're using today do you think that everybody will be using that programming language 100 years from now or you could even say 1000 years from now pick some time horizon right probably not okay so now we're not talking about if people will switch away from that we're talking about when and why what was the reason why they switched so obviously there's some time frame in which people will switch and some reason in which they will switch so then obviously there's something that somebody could make at some time that would be the thing people switch to so now we're just talking about is it too early or not and is this a good enough thing or not and what that does suddenly you can have a discussion about those points but people will find they're no equipped for the discussion because they haven't thought about it seriously they would have realized it was practical but this whole minset of like oh you'll never replace this thing because blah blah blah it's a kind of thinking that we have when we don't want to deal with the complexity of the wold because we want to spend our attention on other things right so it's like I'm not looking very closely at this but I've wrapped up my thouthts about it by cursory thoughts about it in some summary and I have a belief there and I don't have to look past the belief because because I don't want to because of my attentions over here right and that's actually a practical thing that we need to do in order to live becasue if you put your attention on deeply into everything all the time you would never get anything done you wouldn't be able to finish breakfast in the morning right it would be ridiculous so on the one hand it's expected that people would believe that kind of thing but on the other hand it's obviously absurd right this belief is obciously just like a very thin paper wallet you can poke through instantly becasue they haven't actually thought about it and so if you engage people's thought process on something either you can convince them or they just quit the discussion because they don't want to think about it 

Finding a Balance:
Beyond Beauty and Simplicity
this is weird this is hard to talk about there is a broadly understood idear of beauty in science and math that if you try to get too specific about it everbody will argue and disagree right but it's something about sometimes when things are simple and also meaningful then that's obviously beautiful like there's something there's something there like  there's no reasons for this to be so simple but it is and yet it has all these ramifications that spiral outward and and so forth programming languages have that but you also have to fight against it because the history of programming languages is filled with a number of languages that were inspired by that kind of thing like look we can build this language on this very minimal foundation and isn't it exciting that you can do everything you need to do to write a program this small set of of constructs that like interlock in this really interesting way and it's like yes that's interesting however you're like building a chair for people sit in every day that of their life right and if you try to build that out of the minimal number of pieces of wood without licke carving them more than you need to or something it's gonna be an uncomfortable chair most of the time right so there's actually a balance between these two things on the other han if you don't have that notion of beauty if you like discard it completely and that you just pile a bunch of stuff together until it gives you something then you actually get something like the C++language I was maligning earlier that is just a mess and then and then that also has a cost because  then people are dealing with this ugly thing every day and adn even ignoring the functional cost of like it's hard to understand and get my program right because this thing is so complicated people are spending you know eight hours a day for their life dealing with something ugly like doesn't that matter I think it does I think it mattered for me for sure there is an interesting balance and it's difficult to find the right thing so I you know I've said that in my earlier programming language experiments I would have maybe a smaller idea that wasn't really big enough to justfy a whole language but I would get excited about that so for my experience with the early programming languages in college I would have exciting ideas that were not necessarily enough to justify building a whole programming language around but that was because I was relatively new to the topic and I was still in that surface area that's not that deep right getting to the deep part is not particularly easy right you need to do a lot of work a lot of the work will be misguided in some way or another or it won't be in exactly the right direction you might do all this work to like tunnel throught rock to get to here an you're like wait we actually needed a tunnel that goes from that hub out to this diretion so you need to go back and start over and do al that again right because you missed that difinitely happens and so wen I started building this language my intent is for it to be you know some kind of a little bit of a hybrid in keeping its eye on that notion of beauty and simplicity and also for practical concerns being as simple as possible but also being as complecated as it needs to be to be the comfortable useful thing that makes people's lives a lot easier and that's actually a weird balance to strike and so I do have an aesthetics of the language for sure that I've developed and it's it's a little bit nuanced and hard to explain but it's it's there it doesn't come all the way out to the text level yet right the text is a temporary thing that you get to you and the text of this language is maybe a little bit ugly right now and I've deliberately said that I don't care about that yet because I'm working on the deeper parts of it right so the good structure has to start deep and then we'll figure out the surface part later so the plan is we'll probably change the visual syntax of the language quite heavily before it's done once we know what will best accommodate what needs to happen deep right and I think most people do it the other way around or maybe they get to a little bit of a medium depth and then and then they're like they've got some structure or some syntax that's calcified and then they say well this  this is a little bit not good so let's change it a little bit to make the syntax more beautiful right but it's not driven by a real core of anything so that's a common thing I have to answer when people like see my programming streams and they're like don't you care that the syntax for this thing is weird and I'm like yeal but you know that's actually an easy problem to solve right the hard problems to solve there's those are what I have to worry about because those were the ones with a high probability of failure right and most people who have seen lot of programming languages can just make a syntax that's fine that's not actively bad whereas you know some of the problems I'm trying to solve our hard enough especially with a small amount of programming power because we have a very few people working on this compared to like Apple or somebody right that we we have to attack those things fiercely or they would be the points of failure and so we're doing that and then it'll bubble up I've found that it works well for me to do things that way it's also how we did the witness although there's maybe not as much documentation of that actually if you go dig back on our blog you can see early postings where it's like hey we're mocking up this game and you can see it's in 3d this time but it's just a bunch of blocks and whatever I think it helps a lot to not get fixated on the surface things even though those are the obvious things that everyone sees and they're important because those are a substantial part of people's experience in the end so you know we did eventually work on the graphics for braid quite heavily and we did for the witness but we didn't do it at the beginning because it's too easy to go in the wrong direction like I'd like to figure out what we're actually making and then make it good and I'm willing to actually tear the whole thing down and remake it from scratch if that's what's necessary once we found what we need to make you 